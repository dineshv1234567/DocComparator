{
  "_from": "word-extractor@^0.1.4",
  "_id": "word-extractor@0.1.4",
  "_inBundle": false,
  "_integrity": "sha1-NU52iFlIXd73bOFnSGkvdHn9EdI=",
  "_location": "/word-extractor",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "word-extractor",
    "fetchSpec": "^0.1.4",
    "name": "word-extractor",
    "raw": "word-extractor@^0.1.4",
    "rawSpec": "^0.1.4",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/word-extractor/-/word-extractor-0.1.4.tgz",
  "_shasum": "354e768859485ddef76ce16748692f7479fd11d2",
  "_spec": "word-extractor@^0.1.4",
  "_where": "C:\\Users\\Anish\\Documents\\DocTest",
  "author": {
    "email": "stuart@morungos.com",
    "name": "Stuart Watt"
  },
  "bugs": {
    "url": "https://github.com/morungos/node-word-extractor/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "async": "^1.5.2",
    "bluebird": "^2.6.0",
    "event-stream": "^3.3.2",
    "underscore": "^1.8.3"
  },
  "deprecated": false,
  "description": "Node.js package to read Word .doc files",
  "devDependencies": {
    "chai": "^1.10.0",
    "chai-as-promised": "^4.1.1",
    "coffee-script": "^1.8.0",
    "mocha": "^2.2.5"
  },
  "homepage": "https://github.com/morungos/node-word-extractor",
  "keywords": [
    "word"
  ],
  "license": "MIT",
  "main": "lib/word.js",
  "name": "word-extractor",
  "optionalDependencies": {},
  "readme": "### word-extractor\n\nRead data from a Word document using node.js\n\n\n#### Why use this module?\n\nThere are a fair number of npm components which can extract text from Word .doc files, but they all appear to require some external helper program, and involve either spawning a process or communicating with a persistent one. That raises the installation and deployment burden as well as the runtime one.\n\nThis module is intended to provide a much faster way of reading the text from a Word file, without leaving the node.js environment.\n\n\n#### How do I use this module?\n\n    var WordExtractor = require(\"word-extractor\");\n    var extractor = new WordExtractor();\n    var extracted = extractor.extract(\"file.doc\");\n    extracted.then(function(doc) {\n      console.log(doc.getBody());\n    });\n\nThe object returned from the `extract()` method is a promise that resolves to a document object, which then provides several views onto different parts of the document contents.\n\n\n#### Methods\n\n`WordExtractor#extract(file)`\n\nMain method to open a Word file and retrieve the data. Returns a promise which resolves to a `Document`.\n\n`Document#getBody()`\n\nRetrieves the content text from a Word document. This will handle UNICODE characters correctly, so if there are accented or non-Latin-1 characters present in the document, they'll show as is in the returned string.\n\n`Document#getFootnotes()`\n\nRetrieves the footnote text from a Word document. This will handle UNICODE characters correctly, so if there are accented or non-Latin-1 characters present in the document, they'll show as is in the returned string.\n\n`Document#getHeaders()`\n\nRetrieves the header and footer text from a Word document. This will handle UNICODE characters correctly, so if there are accented or non-Latin-1 characters present in the document, they'll show as is in the returned string.\n\n`Document#getAnnotations()`\n\nRetrieves the comment bubble text from a Word document. This will handle UNICODE characters correctly, so if there are accented or non-Latin-1 characters present in the document, they'll show as is in the returned string.\n\n\n#### License\n\nCopyright (c) 2016-2017. Stuart Watt.\n\nLicensed under the MIT License.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/morungos/node-word-extractor.git"
  },
  "scripts": {
    "build": "coffee -b -o lib src",
    "test": "mocha --sort --recursive --compilers coffee:coffee-script/register ./test"
  },
  "version": "0.1.4"
}
